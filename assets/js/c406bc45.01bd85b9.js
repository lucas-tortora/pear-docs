"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[8532],{759:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"how-to/replicate-and-persist-with-hyper-core","title":"How to replicate and persist with Hypercore","description":"In the HyperDHT How-to (Connect Two Peers) and the Hyperswarm How-to (Connect Many Peers), peers can exchange chat messages so long as both are online at the same time and directly connected. The application is ephemeral, the messages are not persisted - they will be lost if the recipient is offline. Hypercore provides the persistence.","source":"@site/docs/how-to/replicate-and-persist-with-hyper-core.md","sourceDirName":"how-to","slug":"/how-to/replicate-and-persist-with-hyper-core","permalink":"/pear-docs/how-to/replicate-and-persist-with-hyper-core","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/replicate-and-persist-with-hyper-core.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How to connect to many peers by topic with Hyperswarm","permalink":"/pear-docs/how-to/connect-many-pears-with-hyper-swarm"},"next":{"title":"How to work with many Hypercores using Corestore","permalink":"/pear-docs/how-to/manage-multiple-hypercores-with-corestore"}}');var o=n(4848),s=n(8453);const a={},i="How to replicate and persist with Hypercore",c={},p=[];function d(e){const r={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"how-to-replicate-and-persist-with-hypercore",children:"How to replicate and persist with Hypercore"})}),"\n",(0,o.jsxs)(r.p,{children:["In the HyperDHT How-to (",(0,o.jsx)(r.a,{href:"./connect-two-peers-by-key-with-hyperdht.md",children:"Connect Two Peers"}),") and the Hyperswarm How-to (",(0,o.jsx)(r.a,{href:"./connect-to-many-peers-by-topic-with-hyperswarm.md",children:"Connect Many Peers"}),"), peers can exchange chat messages so long as both are online at the same time and directly connected. The application is ephemeral, the messages are not persisted - they will be lost if the recipient is offline. Hypercore provides the persistence."]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"../building-blocks/hypercore.md",children:(0,o.jsx)(r.code,{children:"Hypercore"})})," is a secure, distributed append-only log. It is built for sharing enormous datasets and streams of real-time data. It has a secure transport protocol, making it easy to build fast and scalable peer-to-peer applications."]}),"\n",(0,o.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/5t2mOi0BeDg?si=oImBoBtT5jK1ZGNj",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,o.jsxs)(r.p,{children:["In this guide we'll extend the ephemeral chat example in ",(0,o.jsx)(r.a,{href:"./connect-to-many-peers-by-topic-with-hyperswarm.md",children:"Connect Many Peers"})," but using Hypercore to add many significant new features:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Persistence"}),": The owner of the Hypercore can add messages at any time, and they'll be persisted to disk. Whenever they come online, readers can replicate these messages over Hyperswarm."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Many Readers:"})," New messages added to the Hypercore will be broadcast to interested readers. The owner gives each reader a reading capability (",(0,o.jsx)(r.code,{children:"core.key"}),") and a corresponding discovery key (",(0,o.jsx)(r.code,{children:"core.discoveryKey"}),"). The former is used to authorize the reader, ensuring that they have permission to read messages, and the latter is used to discover the owner (and other readers) on the swarm."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["The following example consists of two Pear Terminal Applications: ",(0,o.jsx)(r.code,{children:"reader-app"})," and ",(0,o.jsx)(r.code,{children:"writer-app"}),". When these two applications are opened, two peers are created and connected to each other. A Hypercore is used to store the data entered into the command line."]}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"writer-app"})," code stores the data entered into the command line to the Hypercore instance. The Hypercore instance is replicated with other peers using Hyperswarm."]}),"\n",(0,o.jsxs)(r.p,{children:["Create the ",(0,o.jsx)(r.code,{children:"writer-app"})," project with these commands:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"mkdir writer-app\ncd writer-app\npear init -y -t terminal\nnpm install bare-path bare-process hypercore hyperswarm b4a\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Alter the generated ",(0,o.jsx)(r.code,{children:"writer-app/index.js"})," file to the following:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"import path from 'bare-path'\nimport process from 'bare-process'\nimport Hyperswarm from 'hyperswarm'\nimport Hypercore from 'hypercore'\nimport b4a from 'b4a'\n\nconst swarm = new Hyperswarm()\nPear.teardown(() => swarm.destroy())\n\nconst core = new Hypercore(path.join(Pear.config.storage, 'writer-storage'))\n\n// core.key and core.discoveryKey will only be set after core.ready resolves\nawait core.ready()\nconsole.log('hypercore key:', b4a.toString(core.key, 'hex'))\n\n// Append all stdin data as separate blocks to the core\nprocess.stdin.on('data', (data) => core.append(data))\n\n// core.discoveryKey is *not* a read capability for the core\n// It's only used to discover other peers who *might* have the core\nswarm.join(core.discoveryKey)\nswarm.on('connection', conn => core.replicate(conn))\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"reader-app"})," uses Hyperswarm to connect to the previously initiated peer and synchronize the local Hypercore instance with the Hypercore instance of the writer."]}),"\n",(0,o.jsxs)(r.p,{children:["Create the ",(0,o.jsx)(r.code,{children:"reader-app"})," project with these commands:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"mkdir reader-app\ncd reader-app\npear init -y -t terminal\nnpm install bare-path hypercore hyperswarm\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Alter the generated ",(0,o.jsx)(r.code,{children:"reader-app/index.js"})," file to the following:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"import path from 'bare-path'\nimport Hyperswarm from 'hyperswarm'\nimport Hypercore from 'hypercore'\n\nconst swarm = new Hyperswarm()\nPear.teardown(() => swarm.destroy())\n\nconst core = new Hypercore(path.join(Pear.config.storage, 'reader-storage'), Pear.config.args[0])\nawait core.ready()\n\nswarm.join(core.discoveryKey)\nswarm.on('connection', conn => core.replicate(conn))\n\n// swarm.flush() will wait until *all* discoverable peers have been connected to\nawait swarm.flush()\n\nawait core.update()\n\nlet position = core.length\nconsole.log(`Skipping ${core.length} earlier blocks...`)\nfor await (const block of core.createReadStream({ start: core.length, live: true })) {\n  console.log(`Block ${position++}: ${block}`)\n}\n"})}),"\n",(0,o.jsxs)(r.p,{children:["In one terminal, open ",(0,o.jsx)(r.code,{children:"writer-app"})," with ",(0,o.jsx)(r.code,{children:"pear run --dev ."}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"cd writer-app\npear run --dev .\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"writer-app"})," will output the Hypercore key."]}),"\n",(0,o.jsxs)(r.p,{children:["In another terminal, open the ",(0,o.jsx)(r.code,{children:"reader-app"})," and pass it the key:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"cd reader-app\npear run --dev . <SUPPLY THE KEY HERE>\n"})}),"\n",(0,o.jsx)(r.p,{children:"As inputs are made to the terminal running the writer application, outputs should be shown in the terminal running the reader application."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(6540);const o={},s=t.createContext(o);function a(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);