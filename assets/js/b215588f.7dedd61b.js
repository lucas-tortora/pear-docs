"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[3228],{8390:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"references/helpers/localdrive","title":"Localdrive","description":"A file system API that is similar to Hyperdrive. This tool comes in handy when mirroring files from user filesystem to a drive, and vice-versa.","source":"@site/docs/references/helpers/localdrive.md","sourceDirName":"references/helpers","slug":"/references/helpers/localdrive","permalink":"/pear-docs/references/helpers/localdrive","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/references/helpers/localdrive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Corestore","permalink":"/pear-docs/references/helpers/corestore"},"next":{"title":"MirrorDrive","permalink":"/pear-docs/references/helpers/mirrordrive"}}');var i=n(4848),d=n(8453);const l={},t="Localdrive",c={},o=[{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:3},{value:"<strong><code>const comparison = drive.compare(entryA, entryB)</code></strong>",id:"const-comparison--drivecompareentrya-entryb",level:4},{value:"Examples",id:"examples",level:3},{value:"Metadata hooks",id:"metadata-hooks",level:4}];function a(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"localdrive",children:"Localdrive"})}),"\n",(0,i.jsxs)(r.p,{children:["A file system API that is similar to ",(0,i.jsx)(r.a,{href:"/pear-docs/references/building-blocks/hyperdrive",children:(0,i.jsx)(r.code,{children:"Hyperdrive"})}),". This tool comes in handy when mirroring files from user filesystem to a drive, and vice-versa."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://github.com/holepunchto/localdrive",children:"GitHub (Localdrive)"})}),"\n"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/localdrive#installation",children:"Installation"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/localdrive#usage",children:"Usage"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/localdrive#api",children:"API"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/localdrive#examples",children:"Examples"})}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(r.p,{children:["Install with ",(0,i.jsx)(r.a,{href:"https://www.npmjs.com/",children:"npm"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"npm install localdrive\n"})}),"\n",(0,i.jsx)(r.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"const Localdrive = require('localdrive')\n\nconst drive = new Localdrive('./my-project')\n\nawait drive.put('/blob.txt', Buffer.from('example'))\nawait drive.put('/images/logo.png', Buffer.from('..'))\nawait drive.put('/images/old-logo.png', Buffer.from('..'))\n\nconst buffer = await drive.get('/blob.txt')\nconsole.log(buffer) // => <Buffer ..> 'example'\n\nconst entry = await drive.entry('/blob.txt')\nconsole.log(entry) // => { key, value: { executable, linkname, blob, metadata } }\n\nawait drive.del('/images/old-logo.png')\n\nawait drive.symlink('/images/logo.shortcut', '/images/logo.png')\n\nfor await (const file of drive.list('/images')) {\n  console.log('list', file) // => { key, value }\n}\n\nconst rs = drive.createReadStream('/blob.txt')\nfor await (const chunk of rs) {\n  console.log('rs', chunk) // => <Buffer ..>\n}\n\nconst ws = drive.createWriteStream('/blob.txt')\nws.write('new example')\nws.end()\nws.once('close', () => console.log('file saved'))\n"})}),"\n",(0,i.jsx)(r.h3,{id:"api",children:"API"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const drive = new Localdrive(root, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Creates a drive based on a ",(0,i.jsx)(r.code,{children:"root"})," directory. ",(0,i.jsx)(r.code,{children:"root"})," can be relative or absolute."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"options"})," include:"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Default"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"followLinks"})})}),(0,i.jsxs)(r.td,{children:["If enabled then ",(0,i.jsx)(r.code,{children:"entry(key)"})," will follow the ",(0,i.jsx)(r.code,{children:"linkname"}),"."]}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"false"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"metadata"})})}),(0,i.jsx)(r.td,{children:"Hook functions are called accordingly."}),(0,i.jsx)(r.td,{children:"Object"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"null"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"atomic"})})}),(0,i.jsx)(r.td,{children:"Enables atomicity for file writing (tmp file and rename)."}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"false"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"roots"})})}),(0,i.jsx)(r.td,{children:"For mapping key prefixes to different roots."}),(0,i.jsx)(r.td,{children:"Object"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"{}"})})]})]})]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["The metadata hook ",(0,i.jsx)(r.code,{children:"del()"})," could be called with non-existing metadata keys."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"drive.root"})})}),"\n",(0,i.jsx)(r.p,{children:"String with the resolved (absolute) drive path."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"drive.supportsMetadata"})})}),"\n",(0,i.jsxs)(r.p,{children:["Boolean indicating whether the drive handles metadata. Default ",(0,i.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["If ",(0,i.jsx)(r.code,{children:"options.metadata"})," hooks are passed then ",(0,i.jsx)(r.code,{children:"supportsMetadata"})," becomes ",(0,i.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"await drive.put(key, buffer, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Creates a file at ",(0,i.jsx)(r.code,{children:"key"})," path in the drive. ",(0,i.jsx)(r.code,{children:"options"})," are the same as in ",(0,i.jsx)(r.code,{children:"createWriteStream"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const buffer = await drive.get(key)"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns the blob at ",(0,i.jsx)(r.code,{children:"key"})," path in the drive. If no blob exists, returns null."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:"It also returns null for symbolic links."}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const entry = await drive.entry(key, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns the entry at ",(0,i.jsx)(r.code,{children:"key"})," path in the drive. It looks like this:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"{\n  key: String,\n  value: {\n    executable: Boolean,\n    linkname: null,\n    blob: {\n      byteOffset: Number,\n      blockOffset: Number,\n      blockLength: Number,\n      byteLength: Number\n    },\n    metadata: null\n  },\n  mtime: Number\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Available ",(0,i.jsx)(r.code,{children:"options"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"{\n  follow: false // Follow symlinks, 16 max or throws an error\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"await drive.del(key)"})})}),"\n",(0,i.jsxs)(r.p,{children:["Deletes the file at ",(0,i.jsx)(r.code,{children:"key"})," path from the drive."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"await drive.symlink(key, linkname)"})})}),"\n",(0,i.jsxs)(r.p,{children:["Creates an entry in drive at ",(0,i.jsx)(r.code,{children:"key"})," path that points to the entry at ",(0,i.jsx)(r.code,{children:"linkname"}),"."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["\u2139\ufe0f If a blob entry currently exists at ",(0,i.jsx)(r.code,{children:"key"})," path then it will be overwritten and ",(0,i.jsx)(r.code,{children:"drive.get(key)"})," will return null, while ",(0,i.jsx)(r.code,{children:"drive.entry(key)"})," will return the entry with symlink information."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"const-comparison--drivecompareentrya-entryb",children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const comparison = drive.compare(entryA, entryB)"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns ",(0,i.jsx)(r.code,{children:"0"})," if entries are the same, ",(0,i.jsx)(r.code,{children:"1"})," if ",(0,i.jsx)(r.code,{children:"entryA"})," is older, and ",(0,i.jsx)(r.code,{children:"-1"})," if ",(0,i.jsx)(r.code,{children:"entryB"})," is older."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const iterator = drive.list([folder])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns a stream of all entries in the drive inside of specified ",(0,i.jsx)(r.code,{children:"folder"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const iterator = drive.readdir([folder])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns a stream of all subpaths of entries in drive stored at paths prefixed by ",(0,i.jsx)(r.code,{children:"folder"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const mirror = drive.mirror(out, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Mirrors this drive into another. Returns a ",(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/mirrordrive",children:(0,i.jsx)(r.code,{children:"MirrorDrive"})})," instance constructed with ",(0,i.jsx)(r.code,{children:"options"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Call ",(0,i.jsx)(r.a,{href:"/pear-docs/references/helpers/mirrordrive#await-mirrordone",children:(0,i.jsx)(r.code,{children:"await mirror.done()"})})," to wait for the mirroring to finish."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const rs = drive.createReadStream(key, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Returns a stream to read out the blob stored in the drive at ",(0,i.jsx)(r.code,{children:"key"})," path."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"options"})," include:"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Default"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"start"})})}),(0,i.jsx)(r.td,{children:"Starting offset of the desired readstream interval"}),(0,i.jsx)(r.td,{children:"Integer"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"null"})})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"end"})})}),(0,i.jsx)(r.td,{children:"Ending offset of the desired readstream interval"}),(0,i.jsx)(r.td,{children:"Integer"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"null"})})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"length"})})}),(0,i.jsx)(r.td,{children:"Length of the desired readstream interval"}),(0,i.jsx)(r.td,{children:"Integer"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"null"})})})]})]})]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"start"})," and ",(0,i.jsx)(r.code,{children:"end"})," are inclusive."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"length"})," overrides ",(0,i.jsx)(r.code,{children:"end"}),", they're not meant to be used together."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"const ws = drive.createWriteStream(key, [options])"})})}),"\n",(0,i.jsxs)(r.p,{children:["Streams a blob into the drive at ",(0,i.jsx)(r.code,{children:"key"})," path."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"options"})," include:"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Default"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"executable"})})}),(0,i.jsx)(r.td,{children:"whether the blob is executable or not"}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"true"})})]})})]}),"\n",(0,i.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(r.h4,{id:"metadata-hooks",children:"Metadata hooks"}),"\n",(0,i.jsxs)(r.p,{children:["Metadata backed by ",(0,i.jsx)(r.code,{children:"Map"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"const meta = new Map()\nconst metadata = {\n  get: (key) => meta.has(key) ? meta.get(key) : null,\n  put: (key, value) => meta.set(key, value),\n  del: (key) => meta.delete(key)\n}\n\nconst drive = new Localdrive('./my-app', { metadata })\n\n// ...\n"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"metadata.del()"})," will also be called when metadata is ",(0,i.jsx)(r.code,{children:"null"})]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"await drive.put('/file.txt', Buffer.from('a')) // Default metadata is null\n"})})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>t});var s=n(6540);const i={},d=s.createContext(i);function l(e){const r=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(d.Provider,{value:r},e.children)}}}]);