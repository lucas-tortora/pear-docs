"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[1062],{2278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"getting-started/terminal/simple-chat-app","title":"Making a Pear Terminal Application","description":"This guide demonstrates how to build a peer-to-peer chat application.","source":"@site/docs/getting-started/terminal/simple-chat-app.md","sourceDirName":"getting-started/terminal","slug":"/getting-started/terminal/simple-chat-app","permalink":"/pear-docs/getting-started/terminal/simple-chat-app","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/terminal/simple-chat-app.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Starting a Pear Terminal Project","permalink":"/pear-docs/getting-started/terminal/setup"},"next":{"title":"Debugging A Pear Terminal Application","permalink":"/pear-docs/getting-started/terminal/debug"}}');var o=t(4848),a=t(8453);const i={},s="Making a Pear Terminal Application",c={},l=[{value:"Step 1. Install modules",id:"step-1-install-modules",level:2},{value:"Step 2. JavaScript",id:"step-2-javascript",level:2},{value:"Step 3. Run in dev mode",id:"step-3-run-in-dev-mode",level:2},{value:"Next",id:"next",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"making-a-pear-terminal-application",children:"Making a Pear Terminal Application"})}),"\n",(0,o.jsx)(n.p,{children:"This guide demonstrates how to build a peer-to-peer chat application."}),"\n",(0,o.jsxs)(n.p,{children:["It continues where ",(0,o.jsx)(n.a,{href:"./starting-a-pear-terminal-project.md",children:"Starting a Pear Terminal Project"})," left off."]}),"\n",(0,o.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/UoGJ7PtAwtI?si=xojS0xIUiAPam-kM",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,o.jsx)(n.h2,{id:"step-1-install-modules",children:"Step 1. Install modules"}),"\n",(0,o.jsx)(n.p,{children:"Install the development dependencies using:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will install the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/pear-interface",children:"pear-interface"})," for documentation and auto-completion inside editors."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/brittle",children:"brittle"})," a TAP framework for testing."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For the chat part of the app, the same modules are needed as in ",(0,o.jsx)(n.a,{href:"./making-a-pear-desktop-app.md",children:"Making a Pear Desktop Application"}),", ",(0,o.jsx)(n.code,{children:"hyperswarm"}),", ",(0,o.jsx)(n.code,{children:"b4a"})," and  ",(0,o.jsx)(n.code,{children:"hypercore-crypto"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Pear runs on ",(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/bare",children:(0,o.jsx)(n.code,{children:"Bare"})}),", a lightweight JavaScript runtime which is similar to Node.js but comes with very few internal modules. Almost all Bare functionality comes from dependencies. Pear Terminal Applications are Bare applications so we will need ",(0,o.jsx)(n.code,{children:"bare-readline"})," and ",(0,o.jsx)(n.code,{children:"bare-tty"})," to read user input."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm i bare-readline bare-tty bare-process hyperswarm b4a hypercore-crypto\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-javascript",children:"Step 2. JavaScript"}),"\n",(0,o.jsxs)(n.p,{children:["Replace ",(0,o.jsx)(n.code,{children:"index.js"})," with"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"\n// For interactive documentation and code auto-completion in editor\n/** @typedef {import('pear-interface')} */ \n\n/* global Pear */\nimport Hyperswarm from 'hyperswarm'   // Module for P2P networking and connecting peers\nimport b4a from 'b4a'                 // Module for buffer-to-string and vice-versa conversions \nimport crypto from 'hypercore-crypto' // Cryptographic functions for generating the key in app\nimport readline from 'bare-readline'  // Module for reading user input in terminal\nimport tty from 'bare-tty'            // Module to control terminal behavior\nimport process from 'bare-process'    // Process control for Bare\n\n\nconst { teardown, config, updates } = Pear    // Import configuration options, updates and cleanup functions from Pear\nconst key = config.args.pop()       // Retrieve a potential chat room key from command-line arguments\nconst shouldCreateSwarm = !key      // Flag to determine if a new chat room should be created\nconst swarm = new Hyperswarm()\n\n// Unannounce the public key before exiting the process\n// (This is not a requirement, but it helps avoid DHT pollution)\nteardown(() => swarm.destroy())\n\n// Enable automatic reloading for the app\n// This is optional but helpful during production\nupdates(() => Pear.reload())\n\nconst rl = readline.createInterface({\n  input: new tty.ReadStream(0),\n  output: new tty.WriteStream(1)\n})\n\n// When there's a new connection, listen for new messages, and output them to the terminal\nswarm.on('connection', peer => {\n  const name = b4a.toString(peer.remotePublicKey, 'hex').substr(0, 6)\n  console.log(`[info] New peer joined, ${name}`)\n  peer.on('data', message => appendMessage({ name, message }))\n  peer.on('error', e => console.log(`Connection error: ${e}`))\n})\n\n// When there's updates to the swarm, update the peers count\nswarm.on('update', () => {\n  console.log(`[info] Number of connections is now ${swarm.connections.size}`)\n})\n\nif (shouldCreateSwarm) {\n  await createChatRoom()\n} else {\n  await joinChatRoom(key)\n}\n\nrl.input.setMode(tty.constants.MODE_RAW) // Enable raw input mode for efficient key reading\nrl.on('data', line => {\n  sendMessage(line)\n  rl.prompt()\n})\nrl.prompt()\n\nrl.on('close', () => {\n  process.kill(process.pid, 'SIGINT')\n})\n\nasync function createChatRoom () {\n  // Generate a new random topic (32 byte string)\n  const topicBuffer = crypto.randomBytes(32)\n  // Create a new chat room for the topic\n  await joinSwarm(topicBuffer)\n  const topic = b4a.toString(topicBuffer, 'hex')\n  console.log(`[info] Created new chat room: ${topic}`)\n}\n\nasync function joinChatRoom (topicStr) {\n  const topicBuffer = b4a.from(topicStr, 'hex')\n  await joinSwarm(topicBuffer)\n  console.log(`[info] Joined chat room`)\n}\n\nasync function joinSwarm (topicBuffer) {\n  // Join the swarm with the topic. Setting both client/server to true means that this app can act as both.\n  const discovery = swarm.join(topicBuffer, { client: true, server: true })\n  await discovery.flushed()\n}\n\nfunction sendMessage (message) {\n  // Send the message to all peers (that you are connected to)\n  const peers = [...swarm.connections]\n  for (const peer of peers) peer.write(message)\n}\n\nfunction appendMessage ({ name, message }) {\n  // Output chat msgs to terminal\n  console.log(`[${name}] ${message}`)\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-run-in-dev-mode",children:"Step 3. Run in dev mode"}),"\n",(0,o.jsxs)(n.p,{children:["To test this chat app, in one terminal run ",(0,o.jsx)(n.code,{children:"pear run --dev ."})]}),"\n",(0,o.jsx)(n.p,{children:"The app will output something similar to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[info] Created new chat room: a1b2c35fbeb452bc900c5a1c00306e52319a3159317312f54fe5a246d634f51a\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In another terminal use this key as input, ",(0,o.jsx)(n.code,{children:"pear run --dev . a1b2c35fbeb452bc900c5a1c00306e52319a3159317312f54fe5a246d634f51a"})]}),"\n",(0,o.jsx)(n.p,{children:"The app will output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[info] Number of connections is now 0\n[info] New peer joined, 6193ec\n[info] Number of connections is now 1\n[info] Joined chat room\n"})}),"\n",(0,o.jsx)(n.p,{children:"Type something in one of the applications. Two Terminal Applications are now connected peer-to-peer."}),"\n",(0,o.jsx)(n.h2,{id:"next",children:"Next"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"./sharing-a-pear-app.md",children:"Sharing a Pear Application"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);