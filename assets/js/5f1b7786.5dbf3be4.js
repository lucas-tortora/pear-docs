"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[3051],{8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>a});var t=o(6540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},9265:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"how-to/connect-many-pears-with-hyper-swarm","title":"How to connect to many peers by topic with Hyperswarm","description":"In the former example, two peers connected directly using the first peer\'s public key. Hyperswarm helps to discover peers swarming a common topic, and connect to as many of them as possible. This will become clearer in the Hypercore example, but it\'s the best way to distribute peer-to-peer data structures.","source":"@site/docs/how-to/connect-many-pears-with-hyper-swarm.md","sourceDirName":"how-to","slug":"/how-to/connect-many-pears-with-hyper-swarm","permalink":"/pear-docs/how-to/connect-many-pears-with-hyper-swarm","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/connect-many-pears-with-hyper-swarm.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How to connect two Peers by key with Hyperdht","permalink":"/pear-docs/how-to/connect-two-pears-with-hyper-dht"},"next":{"title":"How to replicate and persist with Hypercore","permalink":"/pear-docs/how-to/replicate-and-persist-with-hyper-core"}}');var r=o(4848),s=o(8453);const c={},a="How to connect to many peers by topic with Hyperswarm",i={},p=[];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"how-to-connect-to-many-peers-by-topic-with-hyperswarm",children:"How to connect to many peers by topic with Hyperswarm"})}),"\n",(0,r.jsx)(n.p,{children:"In the former example, two peers connected directly using the first peer's public key. Hyperswarm helps to discover peers swarming a common topic, and connect to as many of them as possible. This will become clearer in the Hypercore example, but it's the best way to distribute peer-to-peer data structures."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../building-blocks/hyperswarm.md",children:"Hyperswarm"})," module provides a higher-level interface over the underlying DHT, abstracting away the mechanics of establishing and maintaining connections. Instead, 'join' topics, and the swarm discovers peers automatically. It also handles reconnections in the event of failures."]}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.a,{href:"./connect-two-peers-by-key-with-hyperdht.md",children:"How to connect two Peers by key with Hyperdht"}),", we needed to explicitly indicate which peer was the server and which was the client. By using Hyperswarm, we create two peers, have them join a common topic, and let the swarm deal with connections."]}),"\n",(0,r.jsxs)(n.p,{children:["This How-to consists of a single application, ",(0,r.jsx)(n.code,{children:"peer-app"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Create the ",(0,r.jsx)(n.code,{children:"peer-app"})," project with the following commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mkdir peer-app\ncd peer-app\npear init -y -t terminal\nnpm install hyperswarm hypercore-crypto b4a bare-process\n"})}),"\n",(0,r.jsx)(n.p,{children:"Alter the peer-app/index.js file to the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import Hyperswarm from 'hyperswarm'\nimport crypto from 'hypercore-crypto'\nimport b4a from 'b4a'\nimport process from 'bare-process'\n\nconst swarm = new Hyperswarm()\nPear.teardown(() => swarm.destroy())\n\n// Keep track of all connections and console.log incoming data\nconst conns = []\nswarm.on('connection', conn => {\n  const name = b4a.toString(conn.remotePublicKey, 'hex')\n  console.log('* got a connection from:', name, '*')\n  conns.push(conn)\n  conn.once('close', () => conns.splice(conns.indexOf(conn), 1))\n  conn.on('data', data => console.log(`${name}: ${data}`))\n  conn.on('error', e => console.log(`Connection error: ${e}`))\n})\n\n// Broadcast stdin to all connections\nprocess.stdin.on('data', d => {\n  for (const conn of conns) {\n    conn.write(d)\n  }\n})\n\n// Join a common topic\nconst topic = Pear.config.args[0] ? b4a.from(Pear.config.args[0], 'hex') : crypto.randomBytes(32)\nconst discovery = swarm.join(topic, { client: true, server: true })\n\n// The flushed promise will resolve when the topic has been fully announced to the DHT\ndiscovery.flushed().then(() => {\n  console.log('joined topic:', b4a.toString(topic, 'hex'))\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In one terminal, open ",(0,r.jsx)(n.code,{children:"peer-app"})," with ",(0,r.jsx)(n.code,{children:"pear run --dev ."})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cd peer-app\npear run --dev .\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will display the topic. Copy/paste that topic into as many additional terminals as desired with ",(0,r.jsx)(n.code,{children:"pear run --dev . <SUPPLY TOPIC HERE>"})," (assuming that the current working directory of each terminal is the ",(0,r.jsx)(n.code,{children:"peer-app"})," folder). Each peer will log information about the other connected peers."]}),"\n",(0,r.jsx)(n.p,{children:"Start typing into any terminal, and it will be broadcast to all connected peers."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"It is best practice to only have one Hyperswarm instance per application. This will speed up connections by reducing number of entries per topic and connections."}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);