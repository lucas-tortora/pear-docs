"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[8895],{6209:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/autopass-mobile-running-b6308781b6d40ecdf8fc93c2c93dfb11.png"},7994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"how-to/create-a-bare-mobile-app","title":"Making a Bare Mobile Application","description":"This guide demonstrates how to build and run a mobile application using Bare and Expo.","source":"@site/docs/how-to/create-a-bare-mobile-app.md","sourceDirName":"how-to","slug":"/how-to/create-a-bare-mobile-app","permalink":"/pear-docs/how-to/create-a-bare-mobile-app","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/create-a-bare-mobile-app.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How to create a full peer-to-peer filesystem with Hyperdrive","permalink":"/pear-docs/how-to/create-a-full-peer-to-peer-filesystem-with-hyperdrive"},"next":{"title":"Migration","permalink":"/pear-docs/how-to/migrate-from-pear-v1-to-v2"}}');var a=t(4848),i=t(8453);const s={},o="Making a Bare Mobile Application",d={},c=[{value:"Project Dependencies",id:"project-dependencies",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Building the Application",id:"building-the-application",level:2},{value:"Building the UI",id:"building-the-ui",level:3},{value:"Building the Pear-end",id:"building-the-pear-end",level:3},{value:"Bundling the Pear-end",id:"bundling-the-pear-end",level:2},{value:"Running the application",id:"running-the-application",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Viewing error logs",id:"viewing-error-logs",level:2},{value:"Explanation",id:"explanation",level:2},{value:"<code>app/index.tsx</code>",id:"appindextsx",level:3},{value:"<code>backend/backend.mjs</code>",id:"backendbackendmjs",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"making-a-bare-mobile-application",children:"Making a Bare Mobile Application"})}),"\n",(0,a.jsxs)(n.p,{children:["This guide demonstrates how to build and run a mobile application using ",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/bare-expo",children:"Bare and Expo"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["We will be building an application that syncs data from the ",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/pearpass-example/",children:"Pearpass desktop application"})," using ",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/autopass",children:"autopass"})," and displaying a list of the passwords on mobile."]}),"\n",(0,a.jsx)(n.h2,{id:"project-dependencies",children:"Project Dependencies"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Gradle version 8.10.2"}),"\n",(0,a.jsx)(n.li,{children:"Java 23"}),"\n",(0,a.jsx)(n.li,{children:"Android SDK (>= 29), NDK"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,a.jsxs)(n.p,{children:["We will use the ",(0,a.jsx)(n.code,{children:"bare-expo"})," template to build our application. To get started, first clone it with git in a new directory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/holepunchto/bare-expo.git autopass-mobile-example\n"})}),"\n",(0,a.jsx)(n.p,{children:"Change to the project directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd autopass-mobile-example\n"})}),"\n",(0,a.jsx)(n.p,{children:"And install the dependencies we will need:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm i b4a bare-fs bare-rpc corestore autopass @react-native-clipboard/clipboard graceful-goodbye\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm i bare-pack @types/b4a --save-dev\n"})}),"\n",(0,a.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"bare-expo"}),' is a basic template for getting started with Bare applications on mobile. To build a "Pear-end", where the peer-to-peer (P2P) code of the application is run, we will change the directory structure a bit adding a dedicated directory for the Pear-end.']}),"\n",(0,a.jsxs)(n.p,{children:["Create a new directory called ",(0,a.jsx)(n.code,{children:"backend"}),". This is where we will store our Pear-end code that will be run by Bare."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir backend\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"backend.mjs"})," in the ",(0,a.jsx)(n.code,{children:"backend"})," directory, we will use this file as the entry point for anything P2P. All Bare code should be used here."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"touch backend/backend.mjs\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Our React Native UI code will go in the existing ",(0,a.jsx)(n.code,{children:"app/index.tsx"})," file."]}),"\n",(0,a.jsxs)(n.p,{children:["Finally we will use an RPC to communicate between React Native and the Pear-end.\nTo define a common set of command ids we create a ",(0,a.jsx)(n.code,{children:"rpc-commands.mjs"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"touch rpc-commands.mjs\n"})}),"\n",(0,a.jsx)(n.h2,{id:"building-the-application",children:"Building the Application"}),"\n",(0,a.jsx)(n.h3,{id:"building-the-ui",children:"Building the UI"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"app/index.tsx"})," file that came with the ",(0,a.jsx)(n.code,{children:"bare-expo"})," template serves as the entry point of the UI of the React Native app."]}),"\n",(0,a.jsxs)(n.p,{children:["Replace the contents of ",(0,a.jsx)(n.code,{children:"app/index.tsx"})," with:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react'\nimport {\n  View,\n  Text,\n  TextInput,\n  Button,\n  FlatList,\n  Alert,\n  StyleSheet\n} from 'react-native'\nimport { documentDirectory } from 'expo-file-system'\nimport Clipboard from '@react-native-clipboard/clipboard'\nimport { Worklet } from 'react-native-bare-kit'\nimport bundle from './app.bundle.mjs'\nimport RPC from 'bare-rpc'\nimport b4a from 'b4a'\nimport { RPC_RESET, RPC_MESSAGE } from '../rpc-commands.mjs'\n\ntype PasswordEntry = {\n  username: string\n  password: string\n  website: string\n}\n\nexport default function App() {\n  const [dataList, setDataList] = useState<PasswordEntry[]>([])\n  const [pairingInvite, setPairingInvite] = useState('') // State for pairing invite\n  const [isWorkletStarted, setIsWorkletStarted] = useState(false) // State to track worklet status\n\n  const startWorklet = () => {\n    const worklet = new Worklet()\n\n    // Correctly passing the args to worklet.start\n    worklet.start('/app.bundle', bundle, [String(documentDirectory), pairingInvite])\n    const { IPC } = worklet\n    // Initialise RPC\n    new RPC(IPC, (req) => {\n      // Handle incoming RPC requests\n\n      if (req.command === RPC_MESSAGE) {\n        const data = b4a.toString(req.data)\n        const parsedData = JSON.parse(data) // Assuming data is a JSON string\n        const entry: PasswordEntry = {\n          username: parsedData[1],\n          password: parsedData[2],\n          website: parsedData[3]\n        }\n        // Update the dataList with the received entry\n        setDataList((prevDataList) => [...prevDataList, entry])\n      }\n\n      if (req.command === RPC_RESET) {\n        setDataList(() => [])\n      }\n    })\n\n    setIsWorkletStarted(true) // Mark worklet as started\n  }\n\n  const copyToClipboard = (item: PasswordEntry) => {\n    Clipboard.setString(item.password) // Copy password to clipboard\n    Alert.alert('Copied to Clipboard', item.password)\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Autopass-example \ud83c\udf50</Text>\n      {!isWorkletStarted ? ( // Show input if worklet hasn't started\n        <>\n          <TextInput\n            style={styles.input}\n            placeholder='Enter Pairing Invite'\n            value={pairingInvite}\n            onChangeText={setPairingInvite}\n          />\n          <Button title='Submit' onPress={startWorklet} color='#b0d943' />\n        </>\n      ) : (\n        <FlatList\n          data={dataList}\n          keyExtractor={(_, index) => index.toString()}\n          renderItem={({ item }) => (\n            <View style={styles.dataItem}>\n              <Text style={styles.itemText}>Username: {item.username}</Text>\n              <Text style={styles.itemText}>Password: {item.password}</Text>\n              <Text style={styles.itemText}>Website: {item.website}</Text>\n              <Button\n                title='Copy Password'\n                onPress={() => copyToClipboard(item)}\n                color='#b0d943'\n              />\n            </View>\n          )}\n        />\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#011501',\n    padding: 20\n  },\n  heading: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#b0d943',\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  input: {\n    height: 40,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n    color: '#333'\n  },\n  dataItem: {\n    padding: 10,\n    backgroundColor: '#f0f0f0',\n    marginVertical: 5,\n    borderRadius: 5\n  },\n  itemText: {\n    fontSize: 16,\n    color: '#333'\n  }\n})\n"})}),"\n",(0,a.jsx)(n.h3,{id:"building-the-pear-end",children:"Building the Pear-end"}),"\n",(0,a.jsxs)(n.p,{children:["Add the following code to ",(0,a.jsx)(n.code,{children:"backend/backend.mjs"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// /* global Bare, BareKit */\n\nimport RPC from 'bare-rpc'\nimport fs from 'bare-fs'\nimport URL from 'bare-url'\nimport goodbye from 'graceful-goodbye'\nimport { join } from 'bare-path'\nimport { RPC_RESET, RPC_MESSAGE } from '../rpc-commands.mjs'\n\nimport Autopass from 'autopass'\nimport Corestore from 'corestore'\nconst { IPC } = BareKit\n\nconst path = join(URL.fileURLToPath(Bare.argv[0]), 'autopass-example')\n\nconst rpc = new RPC(IPC, (req, error) => {\n  // Handle two way communication here\n})\n\n// For a clean start\nif (fs.existsSync(path)) {\n  fs.rmSync(path, {\n    recursive: true,\n    force: true\n  })\n}\n\nfs.mkdirSync(path)\nconst invite = Bare.argv[1]\nconst pair = Autopass.pair(new Corestore(path), invite)\nconst pass = await pair.finished()\ngoodbye(() => pass.close())\n\nawait pass.ready()\n\npass.on('update', async (e) => {\n  const req = rpc.request(RPC_RESET)\n  req.send('data')\n\n  for await (const data of pass.list()) {\n    const value = JSON.parse(data.value)\n\n    if (value[0] === 'password') {\n      const req = rpc.request(RPC_MESSAGE)\n      req.send(JSON.stringify(value))\n    }\n  }\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Finally define the RPC command enums in ",(0,a.jsx)(n.code,{children:"rpc-commands.mjs"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export const RPC_RESET = 0\nexport const RPC_MESSAGE = 1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bundling-the-pear-end",children:"Bundling the Pear-end"}),"\n",(0,a.jsx)(n.p,{children:"Now we need to create a bundle with all of our Pear-end code, dependencies and references to native addon libraries so that Bare has everything it needs to run our code."}),"\n",(0,a.jsxs)(n.p,{children:["To create the bundle we will use ",(0,a.jsx)(n.code,{children:"bare-pack"}),". Mobile apps link the native addons ahead of time, so we can target only the platform and use the ",(0,a.jsx)(n.code,{children:"--linked"})," option to use those linked libraries. You can learn more about bundling with ",(0,a.jsx)(n.code,{children:"bare-pack"})," ",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/bare-pack",children:"here"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"To create a bundle that targets both iOS and Android, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx bare-pack --target ios --target android  --linked --out app/app.bundle.mjs backend/backend.mjs\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will create a bundle and store it under the ",(0,a.jsx)(n.code,{children:"app"})," directory as ",(0,a.jsx)(n.code,{children:"app.bundle.mjs"})," which is imported by the UI."]}),"\n",(0,a.jsx)(n.h2,{id:"running-the-application",children:"Running the application"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Autopass mobile app running on iOS",src:t(6209).A+"",width:"1419",height:"2796"})}),"\n",(0,a.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run ios\n"})}),"\n",(0,a.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run android\n"})}),"\n",(0,a.jsx)(n.h2,{id:"viewing-error-logs",children:"Viewing error logs"}),"\n",(0,a.jsxs)(n.p,{children:["Any React Native error will be directly printed to the terminal. Bare (Pear-end) errors will not appear directly in the terminal but they can be viewed using ",(0,a.jsx)(n.code,{children:"logcat"})," when running the app on Android."]}),"\n",(0,a.jsxs)(n.p,{children:["To view logs while running on iOS on macOS use the built-in ",(0,a.jsx)(n.a,{href:"https://support.apple.com/en-in/guide/console/cnsl1012/mac",children:"Console.app"})," or the ",(0,a.jsx)(n.code,{children:"log"})," tool using the predicate ",(0,a.jsx)(n.code,{children:"subsystem == 'bare'"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"log stream --level=debug --predicate \"subsystem == 'bare'\"\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For more information on consuming logs, see the ",(0,a.jsxs)(n.a,{href:"https://github.com/holepunchto/liblog?tab=readme-ov-file#consuming-logs",children:[(0,a.jsx)(n.code,{children:"liblog"})," README"]}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,a.jsxs)(n.p,{children:["React Native uses Hermes as its Javascript engine by default. Hermes however does not support User Datagram Protocol (UDP) and the low level control needed for P2P applications. That's where Bare comes in. It provides simple ABI stable native bindings (",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/libjs",children:(0,a.jsx)(n.code,{children:"libjs"})}),") that the Pear platform stack takes advantage of so you can write Javascript once and run it everywhere."]}),"\n",(0,a.jsx)(n.h3,{id:"appindextsx",children:(0,a.jsx)(n.code,{children:"app/index.tsx"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Worklet } from 'react-native-bare-kit'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In order to create a Bare thread, we import the ",(0,a.jsx)(n.code,{children:"Worklet"})," class from ",(0,a.jsx)(n.code,{children:"react-native-bare-kit"}),". This class is what we use to create a Bare thread and is where the Pear-end (P2P) code is run."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import bundle from './app.bundle'\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"app.bundle"})," was created while ",(0,a.jsx)(n.a,{href:"#Bundling-the-Pear-end",children:"bundling the Pear-end"}),". This bundle contains all of our dependencies and the code from ",(0,a.jsx)(n.code,{children:"app/backend.mjs"})," in a single file. We import this bundle so we can pass it to the worklet as the source to run."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import RPC from 'bare-rpc'\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/bare-rpc/",children:(0,a.jsx)(n.code,{children:"bare-rpc"})})," provides a remote procedure call (RPC) on top of ",(0,a.jsx)(n.code,{children:"react-native-bare-kit"}),"'s inter-process communication (IPC) stream to communicate between the React Native UI and the Pear-end."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import b4a from 'b4a'\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"b4a"})," is a module for creating buffers using ",(0,a.jsx)(n.code,{children:"Uint8Array"}),"s where ",(0,a.jsx)(n.code,{children:"Buffer"}),"s are not available. We use this to decode the request data sent via the ",(0,a.jsx)(n.code,{children:"bare-rpc"})," from the Pear-end."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const worklet = new Worklet()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Creates a new ",(0,a.jsx)(n.code,{children:"worklet"})," object, ideally we should only create a single worklet."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"worklet.start('/app.bundle', bundle, [String(documentDirectory), pairingInvite])\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here we start our worklet with the bundle we imported in the previous step. The ",(0,a.jsx)(n.code,{children:"'/app.bundle'"})," is the filename for the bundle, ",(0,a.jsx)(n.code,{children:"bundle"})," is the bundled source that we imported and ",(0,a.jsx)(n.code,{children:"[String(documentDirectory), pairingInvite]"})," are the arguments to be passed to the Bare runtime. These arguments will be available to the Bare process as soon as it starts in ",(0,a.jsx)(n.code,{children:"Bare.argv[]"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IPC } = worklet\n"})}),"\n",(0,a.jsx)(n.p,{children:"Once the worklet has started, we can use its IPC stream to communicate between the UI and Pear-end, but using an RPC on top of the IPC is often easier."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"new RPC(IPC, (req) => {\n  // Handle incoming RPC requests\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To that end, we create an RPC passing it the IPC stream and defining an ",(0,a.jsx)(n.code,{children:"onrequest"})," callback for when a request is received from the other end."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"if (req.command === RPC_MESSAGE) {\n  const data = b4a.toString(req.data)\n  const parsedData = JSON.parse(data) // Assuming data is a JSON string\n  // Use the parsedData...\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Inside the callback, we respond to the request by first checking which command we received and then processing its data. If you need to reply to a command, you can also ",(0,a.jsx)(n.code,{children:"req.reply(data)"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"backendbackendmjs",children:(0,a.jsx)(n.code,{children:"backend/backend.mjs"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import RPC from 'bare-rpc'\nimport fs from 'bare-fs'\n\nimport Autopass from 'autopass'\nimport Corestore from 'corestore'\nconst { IPC } = BareKit\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here we import all necessary modules and define ",(0,a.jsx)(n.code,{children:"IPC"})," getting it from ",(0,a.jsx)(n.code,{children:"BareKit"}),". ",(0,a.jsx)(n.em,{children:"BareKit and Bare are global in this file and available by default."})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"Bare.argv[0]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As previously mentioned, arguments passed to the worklet are available in the ",(0,a.jsx)(n.code,{children:"Bare.argv"})," property. So ",(0,a.jsx)(n.code,{children:"Bare.argv[0]"})," contains the first argument passed to the Bare worklet."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const pair = Autopass.pair(new Corestore(path), invite)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Start the pairing process with the other Autopass instance using the invite passed to the worklet. Checkout the ",(0,a.jsx)(n.code,{children:"autopass"})," ",(0,a.jsx)(n.a,{href:"https://github.com/holepunchto/autopass",children:"README"})," to learn more."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const req = rpc.request(RPC_RESET)\nreq.send('data')\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Create a new RPC request, and send it with ",(0,a.jsx)(n.code,{children:"'data'"}),", this will be received by the UI in the RPC's ",(0,a.jsx)(n.code,{children:"onrequest"})," callback."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);