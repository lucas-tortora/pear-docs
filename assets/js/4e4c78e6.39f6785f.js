"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[5029],{4003:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"references/building-blocks/hyperdht","title":"HyperDHT","description":"The DHT powering Hyperswarm and built on top of dht-rpc. The HyperDHT uses a series of holepunching techniques to ensure connectivity works on most networks and is mainly used to facilitate finding and connecting to peers using end-to-end encrypted Noise streams.","source":"@site/docs/references/building-blocks/hyperdht.md","sourceDirName":"references/building-blocks","slug":"/references/building-blocks/hyperdht","permalink":"/pear-docs/references/building-blocks/hyperdht","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/references/building-blocks/hyperdht.md","tags":[],"version":"current","frontMatter":{}}');var o=s(4848),t=s(8453);const i={},d="HyperDHT",c={},l=[{value:"Installation",id:"installation",level:3},{value:"API",id:"api",level:3},{value:"<strong><code>const node = new DHT([options])</code></strong>",id:"const-node--new-dhtoptions",level:4},{value:"Methods",id:"methods",level:4},{value:"<strong><code>keyPair = DHT.keyPair([seed])</code></strong>",id:"dht.keypair",level:4},{value:"<code>node = DHT.bootstrapper(port, host, [options])</code>",id:"dht.bootstrapper",level:4},{value:"<strong><code>await node.destroy([options])</code></strong>",id:"node.destroy",level:4},{value:"Creating P2P Servers",id:"creating-p2p-servers",level:3},{value:"<strong><code>const server = node.createServer([options], [onconnection])</code></strong>",id:"node.createserver",level:4},{value:"Methods",id:"methods-1",level:4},{value:"<strong><code>await server.listen(keyPair)</code></strong>",id:"server.listen",level:4},{value:"<strong><code>server.refresh()</code></strong>",id:"server.refresh",level:4},{value:"<strong><code>server.address()</code></strong>",id:"server.address",level:4},{value:"<strong><code>await server.close()</code></strong>",id:"server.close",level:4},{value:"Events",id:"events",level:4},{value:"<strong><code>server.on(&#39;connection&#39;, socket)</code></strong>",id:"server.onconnection",level:4},{value:"<strong><code>server.on(&#39;listening&#39;)</code></strong>",id:"server.onlistening",level:4},{value:"<strong><code>server.on(&#39;close&#39;)</code></strong>",id:"server.onclose",level:4},{value:"Connecting to P2P Servers",id:"connecting-to-p2p-servers",level:3},{value:"<strong><code>const socket = node.connect(remotePublicKey, [options])</code></strong>",id:"node.connect",level:4},{value:"Properties",id:"properties",level:4},{value:"<strong><code>socket.remotePublicKey</code></strong>",id:"socket.remotepublickey",level:4},{value:"<strong><code>socket.publicKey</code></strong>",id:"socket.publickey",level:4},{value:"Events",id:"events-1",level:4},{value:"<strong><code>socket.on(&#39;open&#39;)</code></strong>",id:"socket.onopen",level:4},{value:"Additional Peer Discovery",id:"additional-peer-discovery",level:3},{value:"<strong><code>const stream = node.lookup(topic, [options])</code></strong>",id:"node.lookup",level:4},{value:"Methods",id:"methods-2",level:4},{value:"<strong><code>const stream = node.announce(topic, keyPair, [relayAddresses], [options])</code></strong>",id:"node.announce",level:4},{value:"<strong><code>await node.unannounce(topic, keyPair, [options])</code></strong>",id:"node.unannounce",level:4},{value:"Mutable/Immutable Records",id:"mutable-immutable-records",level:3},{value:"Methods",id:"methods-3",level:4},{value:"<strong><code>const { hash, closestNodes } = await node.immutablePut(value, [options])</code></strong>",id:"node.immutableput",level:4},{value:"<strong><code>const { value, from } = await node.immutableGet(hash, [options])</code></strong>",id:"node.immutableget",level:4},{value:"<strong><code>const { publicKey, closestNodes, seq, signature } = await node.mutablePut(keyPair, value, [options])</code></strong>",id:"node.mutableput",level:4},{value:"<strong><code>const { value, from, seq, signature } = await node.mutableGet(publicKey, [options])</code></strong>",id:"node.mutableget",level:4}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"hyperdht",children:"HyperDHT"})}),"\n",(0,o.jsxs)(n.p,{children:["The DHT powering Hyperswarm and built on top of ",(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/dht-rpc",children:"dht-rpc"}),". The HyperDHT uses a series of holepunching techniques to ensure connectivity works on most networks and is mainly used to facilitate finding and connecting to peers using end-to-end encrypted Noise streams."]}),"\n",(0,o.jsx)(n.p,{children:"In the HyperDHT, peers are identified by a public key, not by an IP address. A public key can be connected regardless of where the peers are located, even if they move between different networks."}),"\n",(0,o.jsx)(n.p,{children:"Notable features include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"lower-level module provides direct access to the DHT for connecting peers using key pairs"}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/hyperdht",children:"GitHub (Hyperdht)"})}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht",children:"HyperDHT"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#installation",children:"Create a new instance"})}),"\n",(0,o.jsxs)(n.li,{children:["Basic:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Methods:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#dht.keypair",children:"DHT.keyPair([seed])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#dht.bootstrapper",children:"DHT.bootstrapper(port, host, [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.destroy",children:"node.destroy([options])"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#creating-p2p-servers",children:"Creating P2P servers:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.createserver",children:"node.createServer([options], [onconnection])"})}),"\n",(0,o.jsxs)(n.li,{children:["Methods:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.listen",children:"server.listen(keyPair)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.refresh",children:"server.refresh()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.address",children:"server.address()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.close",children:"server.close()"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Events:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.onconnection",children:"connection"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.onlistening",children:"listening"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#server.onclose",children:"close"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#connecting-to-p2p-servers",children:"Connecting to P2P servers"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.connect",children:"node.connect(remotePublicKey, [options])"})}),"\n",(0,o.jsxs)(n.li,{children:["Properties:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#socket.remotepublickey",children:"socket.remotePublicKey"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#socket.publickey",children:"socket.publicKey"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Events:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#socket.onopen",children:"open"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#additional-peer-discovery",children:"Additional Peer Discovery"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Methods:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.lookup",children:"node.lookup(topic, [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.announce",children:"node.announce(topic, keyPair, [relayAddresses], [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.unannounce",children:"node.unannounce(topic, keyPair, [options])"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#mutable-immutable-records",children:"Mutable/immutable records:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Methods:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.immutableput",children:"node.immutablePut(value, [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.immutableget",children:"node.immutableGet(hash, [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.mutableput",children:"node.mutablePut(keyPair, value, [options])"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/pear-docs/references/building-blocks/hyperdht#node.mutableget",children:"node.mutableGet(publicKey, [options])"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["Install with ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install hyperdht\n"})}),"\n",(0,o.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h4,{id:"const-node--new-dhtoptions",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const node = new DHT([options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Create a new DHT node."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"options"})," include:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"bootstrap"})})}),(0,o.jsx)(n.td,{children:"overwrite the default bootstrap servers, just need to be an array of any known DHT node(s)"}),(0,o.jsx)(n.td,{children:"Array"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"['node1.hyperdht.org:49737', 'node2.hyperdht.org:49737', 'node3.hyperdht.org:49737']"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"keyPair"})})}),(0,o.jsx)(n.td,{children:"optionally pass the public key and secret key as a key pair to use for server.listen and connect"}),(0,o.jsx)(n.td,{children:"Object"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"null"})})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/dht-rpc",children:"dht-rpc"})," for more options as HyperDHT inherits from that."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\u2139\ufe0f The default bootstrap servers are publicly served on behalf of the commons. To run a fully isolated DHT, start one or more DHT nodes with an empty bootstrap array (",(0,o.jsx)(n.code,{children:"new DHT({bootstrap:[]})"}),") and then use the addresses of those nodes as the ",(0,o.jsx)(n.code,{children:"bootstrap"})," option in all other DHT nodes. At least one persistent node is needed for the network to be completely operational."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h4,{id:"dht.keypair",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"keyPair = DHT.keyPair([seed])"})})}),"\n",(0,o.jsx)(n.p,{children:"Generates the required key pair for DHT operations."}),"\n",(0,o.jsxs)(n.p,{children:["Returns an object with ",(0,o.jsx)(n.code,{children:"{publicKey, secretKey}"}),". ",(0,o.jsx)(n.code,{children:"publicKey"})," holds a public key buffer, ",(0,o.jsx)(n.code,{children:"secretKey"})," holds a private key buffer."]}),"\n",(0,o.jsx)(n.p,{children:"Any options passed are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h4,{id:"dht.bootstrapper",children:(0,o.jsx)(n.code,{children:"node = DHT.bootstrapper(port, host, [options])"})}),"\n",(0,o.jsx)(n.p,{children:"Use this method to create a bootstrap node for in order to run a Hyperswarm network."}),"\n",(0,o.jsx)(n.h4,{id:"node.destroy",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"await node.destroy([options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Fully destroy this DHT node."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["This will also unannounce any running servers. To force close the node without waiting for the servers to unannounce pass ",(0,o.jsx)(n.code,{children:"{ force: true }"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"creating-p2p-servers",children:"Creating P2P Servers"}),"\n",(0,o.jsx)(n.h4,{id:"node.createserver",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const server = node.createServer([options], [onconnection])"})})}),"\n",(0,o.jsx)(n.p,{children:"Creates a new server for accepting incoming encrypted P2P connections."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"options"})," include:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"{\n  firewall (remotePublicKey, remoteHandshakePayload) {\n    // validate if connection from remotePublicKey is accepted\n    // if it is accepted return false, else return true\n    // remoteHandshakePayload contains their ip and some more info\n    return true\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"You can run servers on normal home computers, as the DHT will UDP holepunch connections for you."}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,o.jsx)(n.h4,{id:"server.listen",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"await server.listen(keyPair)"})})}),"\n",(0,o.jsxs)(n.p,{children:["Makes the server listen on a keyPair. To connect to this server use ",(0,o.jsx)(n.code,{children:"keyPair.publicKey"})," as the connect address."]}),"\n",(0,o.jsx)(n.h4,{id:"server.refresh",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"server.refresh()"})})}),"\n",(0,o.jsx)(n.p,{children:"Refreshes the server, causing it to reannounce its address. This is automatically called on network changes."}),"\n",(0,o.jsx)(n.h4,{id:"server.address",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"server.address()"})})}),"\n",(0,o.jsx)(n.p,{children:"Returns an object containing the address of the server:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"{\n  host, // external IP of the server,\n  port, // external port of the server if predictable,\n  publicKey // public key of the server\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Information can also be retrieved from ",(0,o.jsx)(n.code,{children:"node.remoteAddress()"})," minus the public key."]}),"\n",(0,o.jsx)(n.h4,{id:"server.close",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"await server.close()"})})}),"\n",(0,o.jsx)(n.p,{children:"Stops listening."}),"\n",(0,o.jsx)(n.h4,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.h4,{id:"server.onconnection",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"server.on('connection', socket)"})})}),"\n",(0,o.jsx)(n.p,{children:"Emitted when a new encrypted connection has passed the firewall check."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"socket"})," is a ",(0,o.jsx)(n.a,{href:"https://github.com/holepunchto/hyperswarm-secret-stream",children:"NoiseSecretStream"})," instance."]}),"\n",(0,o.jsxs)(n.p,{children:["User connections are identifiable by ",(0,o.jsx)(n.code,{children:"socket.remotePublicKey"})," and ",(0,o.jsx)(n.code,{children:"socket.handshakeHash"})," contains a unique hash representing this crypto session (same on both sides)."]}),"\n",(0,o.jsx)(n.h4,{id:"server.onlistening",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"server.on('listening')"})})}),"\n",(0,o.jsx)(n.p,{children:"Emitted when the server is fully listening on a keyPair."}),"\n",(0,o.jsx)(n.h4,{id:"server.onclose",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"server.on('close')"})})}),"\n",(0,o.jsx)(n.p,{children:"Emitted when the server is fully closed."}),"\n",(0,o.jsx)(n.h3,{id:"connecting-to-p2p-servers",children:"Connecting to P2P Servers"}),"\n",(0,o.jsx)(n.h4,{id:"node.connect",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const socket = node.connect(remotePublicKey, [options])"})})}),"\n",(0,o.jsxs)(n.p,{children:["Connect to a remote server. Similar to ",(0,o.jsx)(n.code,{children:"createServer"})," this performs UDP hole punching for P2P connectivity."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const node = new DHT()\n\nconst remotePublicKey = Buffer.from('public key of remote peer', 'hex')\nconst encryptedSocket = node.connect(remotePublicKey)\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"options"})," include:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"nodes"})})}),(0,o.jsx)(n.td,{children:"optional array of close dht nodes to speed up connecting"}),(0,o.jsx)(n.td,{children:"Array"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"[]"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"keyPair"})})}),(0,o.jsx)(n.td,{children:"optional key pair to use when connecting"}),(0,o.jsx)(n.td,{children:"Object"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"node.defaultKeyPair"})})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(n.h4,{id:"socket.remotepublickey",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"socket.remotePublicKey"})})}),"\n",(0,o.jsx)(n.p,{children:"The public key of the remote peer."}),"\n",(0,o.jsx)(n.h4,{id:"socket.publickey",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"socket.publicKey"})})}),"\n",(0,o.jsx)(n.p,{children:"The public key of the connection."}),"\n",(0,o.jsx)(n.h4,{id:"events-1",children:"Events"}),"\n",(0,o.jsx)(n.h4,{id:"socket.onopen",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"socket.on('open')"})})}),"\n",(0,o.jsx)(n.p,{children:"Emitted when the encrypted connection has been fully established with the server."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"encryptedSocket.on('open', function () {\n  console.log('Connected to server')\n})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"additional-peer-discovery",children:"Additional Peer Discovery"}),"\n",(0,o.jsx)(n.h4,{id:"node.lookup",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const stream = node.lookup(topic, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Look for peers in the DHT on the given topic. The topic should be a 32-byte buffer (normally a hash of something)."}),"\n",(0,o.jsx)(n.p,{children:"The returned stream looks like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"{\n  // Who sent the response?\n  from: { id, host, port },\n  // What address they responded to\n  to: { host, port },\n  // List of peers announcing under this topic\n  peers: [ { publicKey, nodes: [{ host, port }, ...] } ]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To connect to the peers, also call ",(0,o.jsx)(n.code,{children:"connect"})," afterward with those public keys."]}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h4,{id:"methods-2",children:"Methods"}),"\n",(0,o.jsx)(n.h4,{id:"node.announce",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const stream = node.announce(topic, keyPair, [relayAddresses], [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Announces that users are listening on a key pair to the DHT under a specific topic. An announce does a parallel lookup so the stream returned that looks like the lookup stream."}),"\n",(0,o.jsxs)(n.p,{children:["Any passed options are forwarded to ",(0,o.jsx)(n.code,{children:"dht-rpc"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"When announcing, a signed proof is sent to peers that the peer owns the key pair and wishes to announce under the specific topic. Optionally up to 3 nodes can be provided, indicating which DHT nodes can relay messages to the peer - this speeds up connects later on for other users."}),"\n",(0,o.jsxs)(n.p,{children:["Creating a server using ",(0,o.jsx)(n.code,{children:"dht.createServer"})," automatically announces itself periodically on the key pair it is listening on. When announcing the server under a specific topic, access the nodes it is close to using ",(0,o.jsx)(n.code,{children:"server.nodes"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"node.unannounce",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"await node.unannounce(topic, keyPair, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Unannounces a key pair."}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h3,{id:"mutable-immutable-records",children:"Mutable/Immutable Records"}),"\n",(0,o.jsx)(n.h4,{id:"methods-3",children:"Methods"}),"\n",(0,o.jsx)(n.h4,{id:"node.immutableput",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const { hash, closestNodes } = await node.immutablePut(value, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Stores an immutable value in the DHT. When successful, the hash of the value is returned."}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h4,{id:"node.immutableget",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const { value, from } = await node.immutableGet(hash, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Fetch an immutable value from the DHT. When successful, it returns the value corresponding to the hash."}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h4,{id:"node.mutableput",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const { publicKey, closestNodes, seq, signature } = await node.mutablePut(keyPair, value, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Stores a mutable value in the DHT."}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."}),"\n",(0,o.jsx)(n.h4,{id:"node.mutableget",children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"const { value, from, seq, signature } = await node.mutableGet(publicKey, [options])"})})}),"\n",(0,o.jsx)(n.p,{children:"Fetches a mutable value from the DHT."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"options"})," include:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"seq"})})}),(0,o.jsxs)(n.td,{children:["Returns values with corresponding ",(0,o.jsx)(n.code,{children:"seq"})," values that are greater than or equal to the supplied ",(0,o.jsx)(n.code,{children:"seq"})," option"]}),(0,o.jsx)(n.td,{children:"Integer"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"0"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"latest"})})}),(0,o.jsxs)(n.td,{children:["Indicates whether the query should try to find the highest seq before returning, or just the first verified value larger than ",(0,o.jsx)(n.code,{children:"options.seq"})," it sees."]}),(0,o.jsx)(n.td,{children:"Boolean"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"Any passed options are forwarded to dht-rpc."})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var r=s(6540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);