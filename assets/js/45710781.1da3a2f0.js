"use strict";(globalThis.webpackChunkpear_docs_docusarus=globalThis.webpackChunkpear_docs_docusarus||[]).push([[9512],{2:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/desktop/setup","title":"Making a Pear Desktop Application","description":"This guide demonstrates how to build a peer-to-peer chat application.","source":"@site/docs/getting-started/desktop/setup.md","sourceDirName":"getting-started/desktop","slug":"/getting-started/desktop/setup","permalink":"/pear-docs/getting-started/desktop/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/desktop/setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Debugging A Pear Terminal Application","permalink":"/pear-docs/getting-started/terminal/debug"},"next":{"title":"Starting a Pear Desktop Project","permalink":"/pear-docs/getting-started/desktop/simple-chat-app"}}');var r=t(4848),s=t(8453);const o={},a="Making a Pear Desktop Application",c={},d=[{value:"Step 1. HTML Structure and CSS Styles",id:"step-1-html-structure-and-css-styles",level:2},{value:"Step 2. Module dependencies",id:"step-2-module-dependencies",level:2},{value:"Step 3. JavaScript",id:"step-3-javascript",level:2},{value:"Step 4. Chat",id:"step-4-chat",level:2},{value:"Discussion",id:"discussion",level:3},{value:"Chatting With Another Machine",id:"chatting-with-another-machine",level:4},{value:"Joining Topics VS Joining Servers",id:"joining-topics-vs-joining-servers",level:4},{value:"Frontend Frameworks",id:"frontend-frameworks",level:4},{value:"Next",id:"next",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"making-a-pear-desktop-application",children:"Making a Pear Desktop Application"})}),"\n",(0,r.jsx)(n.p,{children:"This guide demonstrates how to build a peer-to-peer chat application."}),"\n",(0,r.jsxs)(n.p,{children:["It continues where ",(0,r.jsx)(n.a,{href:"./starting-a-pear-desktop-project.md",children:"Starting a Pear Desktop Project"})," left off."]}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/y2G97xz78gU?si=E8UmXSS2WWYtIV1V",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,r.jsx)(n.h2,{id:"step-1-html-structure-and-css-styles",children:"Step 1. HTML Structure and CSS Styles"}),"\n",(0,r.jsx)(n.p,{children:"The project folder should contain:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"package.json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"index.html"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"app.js"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"test/index.test.js"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Start by defining the app's layout in ",(0,r.jsx)(n.code,{children:"index.html"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      pear-ctrl[data-platform="darwin"] { margin-top: 12px; margin-left: 10px; }\n\n      #titlebar {\n        -webkit-app-region: drag;\n        height: 30px;\n        width: 100%;\n        position: fixed;\n        left: 0;\n        top: 0;\n        background-color: #B0D94413;\n        filter: drop-shadow(2px 10px 6px #888);\n      }\n\n      button, input {\n        all: unset;\n        border: 1px ridge #B0D944;\n        background: #000;\n        color: #B0D944;\n        padding: .45rem;\n        font-family: monospace;\n        font-size: 1rem;\n        line-height: 1rem;\n      }\n\n      body {\n        background-color: #001601;\n        font-family: monospace;\n        margin: 0;\n        padding: 0;\n      }\n\n      main {\n        display: flex;\n        height: 100vh;\n        color: white;\n        justify-content: center;\n        margin: 0;\n        padding: 0;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      #or {\n        margin: 1.5rem auto;\n      }\n\n      #setup {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      }\n\n      #loading {\n        align-self: center;\n      }\n\n      #chat {\n        display: flex;\n        flex-direction: column;\n        width: 100vw;\n        padding: .75rem;\n      }\n\n      #header {\n        margin-top: 2.2rem;\n        margin-bottom: 0.75rem;\n      }\n\n      #details {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      #messages {\n        flex: 1;\n        font-family: \'Courier New\', Courier, monospace;\n        overflow-y: scroll;\n      }\n\n      #message-form {\n        display: flex;\n      }\n\n      #message {\n        flex: 1;\n      }\n    </style>\n    <script type=\'module\' src=\'./app.js\'><\/script>\n  </head>\n  <body>\n    <div id="titlebar">\n      <pear-ctrl></pear-ctrl>\n    </div>\n    <main>\n      <div id="setup">\n        <div>\n          <button id="create-chat-room">Create</button>\n        </div>\n        <div id="or">\n          - or -\n        </div>\n        <form id="join-form">\n          <button type="submit" id="join-chat-room">Join</button>\n          <input required id="join-chat-room-topic" type="text" placeholder="Chat room Topic" />\n        </form>\n      </div>\n      <div id="loading" class="hidden">Loading ...</div>\n      <div id="chat" class="hidden">\n        <div id="header">\n          <div id="details">\n            <div>\n              Topic: <span id="chat-room-topic"></span>\n            </div>\n            <div>\n              Peers: <span id="peers-count">0</span>\n            </div>\n          </div>\n        </div>\n        <div id="messages"></div>\n        <form id="message-form">\n          <input id="message" type="text" />\n          <input type="submit" value="Send" />\n        </form>\n      </div>\n    </main>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": To make the ",(0,r.jsx)(n.code,{children:"<pear-ctrl>"})," element draggable in Pear applications, wrap it in another element that uses the following CSS property:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"-webkit-app-region : drag;\n"})}),"\n",(0,r.jsx)(n.p,{children:"This non-standard CSS property tells the application that this element should act as a draggable region for the entire window."}),"\n",(0,r.jsxs)(n.p,{children:["Running ",(0,r.jsx)(n.code,{children:"pear run --dev ."})," should show"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Layout of the app",src:t(3140).A+"",width:"1400",height:"800"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-module-dependencies",children:"Step 2. Module dependencies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Close the app before installing dependencies. If dependencies are installed while the app is running, an error is thrown."]}),"\n",(0,r.jsx)(n.p,{children:"Install the development dependencies using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will install the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/holepunchto/pear-interface",children:"pear-interface"})," for documentation and auto-completion inside editor."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/holepunchto/brittle",children:"brittle"})," a TAP framework for testing."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The app uses these modules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/hyperswarm",children:"hyperswarm"}),' to connect peers on a "topic".']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/hypercore-crypto",children:"hypercore-crypto"})," for basic cryptography."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/b4a",children:"b4a"})," to manipulate buffers."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Install the dependencies with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install hyperswarm hypercore-crypto b4a\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-javascript",children:"Step 3. JavaScript"}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"app.js"})," with"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"\n// For interactive documentation and code auto-completion in editor\n/** @typedef {import('pear-interface')} */ \n\n/* global Pear */\nimport Hyperswarm from 'hyperswarm'   // Module for P2P networking and connecting peers\nimport crypto from 'hypercore-crypto' // Cryptographic functions for generating the key in app\nimport b4a from 'b4a'                 // Module for buffer-to-string and vice-versa conversions \nconst { teardown, updates } = Pear    // Functions for cleanup and updates\n\nconst swarm = new Hyperswarm()\n\n// Unannounce the public key before exiting the process\n// (This is not a requirement, but it helps avoid DHT pollution)\nteardown(() => swarm.destroy())\n\n// Enable automatic reloading for the app\n// This is optional but helpful during production\nupdates(() => Pear.reload())\n\n// When there's a new connection, listen for new messages, and add them to the UI\nswarm.on('connection', (peer) => {\n  // name incoming peers after first 6 chars of its public key as hex\n  const name = b4a.toString(peer.remotePublicKey, 'hex').substr(0, 6)\n  peer.on('data', message => onMessageAdded(name, message))\n  peer.on('error', e => console.log(`Connection error: ${e}`))\n})\n\n// When there's updates to the swarm, update the peers count\nswarm.on('update', () => {\n  document.querySelector('#peers-count').textContent = swarm.connections.size\n})\n\ndocument.querySelector('#create-chat-room').addEventListener('click', createChatRoom)\ndocument.querySelector('#join-form').addEventListener('submit', joinChatRoom)\ndocument.querySelector('#message-form').addEventListener('submit', sendMessage)\n\nasync function createChatRoom() {\n  // Generate a new random topic (32 byte string)\n  const topicBuffer = crypto.randomBytes(32)\n  joinSwarm(topicBuffer)\n}\n\nasync function joinChatRoom (e) {\n  e.preventDefault()\n  const topicStr = document.querySelector('#join-chat-room-topic').value\n  const topicBuffer = b4a.from(topicStr, 'hex')\n  joinSwarm(topicBuffer)\n}\n\nasync function joinSwarm (topicBuffer) {\n  document.querySelector('#setup').classList.add('hidden')\n  document.querySelector('#loading').classList.remove('hidden')\n\n  // Join the swarm with the topic. Setting both client/server to true means that this app can act as both.\n  const discovery = swarm.join(topicBuffer, { client: true, server: true })\n  await discovery.flushed()\n\n  const topic = b4a.toString(topicBuffer, 'hex')\n  document.querySelector('#chat-room-topic').innerText = topic\n  document.querySelector('#loading').classList.add('hidden')\n  document.querySelector('#chat').classList.remove('hidden')\n}\n\nfunction sendMessage (e) {\n  const message = document.querySelector('#message').value\n  document.querySelector('#message').value = ''\n  e.preventDefault()\n\n  onMessageAdded('You', message)\n\n  // Send the message to all peers (that you are connected to)\n  const peers = [...swarm.connections]\n  for (const peer of peers) peer.write(message)\n}\n\n// appends element to #messages element with content set to sender and message\nfunction onMessageAdded (from, message) {\n  const $div = document.createElement('div')\n  $div.textContent = `<${from}> ${message}`\n  document.querySelector('#messages').appendChild($div)\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Note that the ",(0,r.jsx)(n.code,{children:"pear"})," dependency is used, even though it was not installed. This is the ",(0,r.jsx)(n.a,{href:"../reference/pear/api.md",children:"Pear API"}),", available to any Pear project."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-chat",children:"Step 4. Chat"}),"\n",(0,r.jsxs)(n.p,{children:["Open two app instances by running ",(0,r.jsx)(n.code,{children:"pear run --dev ."})," in two terminals."]}),"\n",(0,r.jsxs)(n.p,{children:["In the first app, click on ",(0,r.jsx)(n.code,{children:"Create"}),". A random topic will appear at the top."]}),"\n",(0,r.jsx)(n.p,{children:"Note that topics consist of 64 hexadecimal characters (32 bytes)."}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("img",{src:"/img/chat-app-4a.png",alt:"The first app, with the topic"})}),"\n",(0,r.jsxs)(n.p,{children:["Paste the topic into the second app, then click on ",(0,r.jsx)(n.code,{children:"Join"}),"."]}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)("img",{src:"/img/chat-app-4b.png",alt:"Second app, using topic from the first"})}),"\n",(0,r.jsx)(n.p,{children:"Once connected, messages can be sent between each chat application."}),"\n",(0,r.jsxs)("p",{align:"center",children:[(0,r.jsx)("img",{src:"/img/chat-app-5a.png",alt:"View from the first app"}),(0,r.jsx)("img",{src:"/img/chat-app-5b.png",alt:"View from the second app"})]}),"\n",(0,r.jsx)(n.h3,{id:"discussion",children:"Discussion"}),"\n",(0,r.jsx)(n.h4,{id:"chatting-with-another-machine",children:"Chatting With Another Machine"}),"\n",(0,r.jsx)(n.p,{children:"The two application instances used Hyperswarm's distributed hash table (DHT) to connect with each other."}),"\n",(0,r.jsx)(n.p,{children:"The DHT enables connections across different machines, so chatting with other people is also possible, as long as they run the same application."}),"\n",(0,r.jsxs)(n.p,{children:["One option is to copy the code, but it is also possible to distribute the application itself over the DHT. This is the topic of ",(0,r.jsx)(n.a,{href:"./sharing-a-pear-app.md",children:"Sharing a Pear Application"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"joining-topics-vs-joining-servers",children:"Joining Topics VS Joining Servers"}),"\n",(0,r.jsxs)(n.p,{children:["In a traditional client-server setup, the server is hosted at an IP address (or hostname) and a port, e.g. ",(0,r.jsx)(n.code,{children:"http://localhost:3000"}),". This is what clients use to connect to the server."]}),"\n",(0,r.jsxs)(n.p,{children:["The code in ",(0,r.jsx)(n.code,{children:"app.js"})," contains the line ",(0,r.jsx)(n.code,{children:"swarm.join(topicBuffer, { client: true, server: true })"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"topicBuffer"})," is the invitation: anyone who knows this topic can join the room and message the other members."]}),"\n",(0,r.jsx)(n.p,{children:"Note that all members are equal: there is no separate client or server. If the room creator goes offline, or even deletes the room from their machine, the other members can continue chatting."}),"\n",(0,r.jsx)(n.h4,{id:"frontend-frameworks",children:"Frontend Frameworks"}),"\n",(0,r.jsx)(n.p,{children:"Any frontend framework can be used with Pear."}),"\n",(0,r.jsx)(n.h2,{id:"next",children:"Next"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./starting-a-pear-terminal-project.md",children:"Starting a Pear Terminal Project"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./sharing-a-pear-app.md",children:"Sharing a Pear Application"})}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3140:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/chat-app-3-16b226301875232e4cda83a0dead8909.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);